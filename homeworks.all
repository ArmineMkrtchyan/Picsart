# def reverse(data):
#     print(data[::-1])
#
#
# print(reverse([3, 4, 5, 6]))

# def min(data):
#     i = 0
#     _min = data[0]
#     while i < len(data):
#         if data[i] < _min:
#             _min = data[i]
#         i += 1
#     print(_min)
#
#
# print(min([4, 5, 2, 5, 78, 9, 0, 2]))


# def triple(data):
#     i = 0
#     while i < len(data):
#         data[i] *= 3
#         i += 1
#     print(data)
#
#
# print(triple([3, 4, 1, 3]))


# def map3(func, data1, data2, data3):
#     res = [None] * len(data1)
#     for i in range(len(data1)):
#         res[i] = func(data1[i], data2[i], data3[i])
#     return res
#
#
# def func(a, b, c):
#     return a + b + c
#
#
# print(list(map3(func, [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4])))

# def contain(data, val):
#     i = 0
#     c = 0
#     while i < len(data):
#         if data[i] == val:
#             c += 1
#         i += 1
#     if c == 0:
#         return False
#     return True
#
#
# print(contain([3, 4, 5, 5, 7], 4))


# def pop(data, i = None):
#     if i is None:
#         k = data[-1]
#         del data[-1]
#     else:
#         k = data[i]
#         del data[i]
#     print(k)
#
#
# print(pop([2, 3, 4, 4, 5], 1))


# def map2(func, data1, data2):
#     res = [None] * len(data1)
#     for i in range(len(data1)):
#         res[i] = func(data1[i], data2[i])
#     return res
#
#
# def func(base, exp):
#     return base**exp
#
#
# print(list(map2(func, [3, 4, 5, 8], [0, 1, 2,1])))


# def replace(source, old, new):
#     source = list(source)
#     for i in range(len(source)):
#         if source[i] == old:
#             source[i] = new
#     print(''.join(source))
#
#
# print(replace('as f dma', ' ', '-'))

# def join(data, sep):
#     res = ''
#     for i in data:
#         res += i + sep
#     return res[:-len(sep)]
#
#
# print(join(['3', '40', '5'], 'ewe'))

# def remove_all(data, value):
#     i = 0
#     data1 = []
#     while i < len(data):
#         if data[i] != value:
#             data1.append(data[i])
#         i += 1
#     print(data1)
#
#
# print(remove_all([3, 4, 7, 3, 3, 8, 9, 3], 3))

# words = eval(input('enter words '))
# words1 = []
# for word in words:
#     if word not in words1:
#         words1.append(word)
# print(words1)

# def f(lst):
#     data = []
#     for i in lst:
#         if i not in data:
#             data.append(i)
#     print(data)
#
#
# print(f(['rw', 'g', 's', 'g', 'g', 'lk']))

# def divisor(n):
#     data = []
#     for i in range(1, n + 1):
#         if n % i == 0:
#             data.append(i)
#     print(data)
#
#
# print(divisor(36))


# def zip(data1, data2):
#     lst = []
#     for i in range(len(data1)):
#         lst.append(data1[i])
#         lst.append(data2[i])
#     print(lst)
#
#
# print(zip([2, 32, 4, 1], [3, 4, 634, 8]))


# def ideal(n):
#     sum = 0
#     for i in range(1, n):
#         if n % i == 0:
#             sum += i
#     if sum == n:
#         return True
#     return False
#
#
# print(ideal(29))


# num = eval(input('input numbers '))
# sum = 0
# n = len(num)
# data = []
# for i in num:
#     sum += i
# data.append(sum/n)
# for i in num:
#     if i <= sum/n:
#         data.append(i)
# for i in num:
#     if i > sum/n:
#         data.append(i)
# print(data)

# import random
# lst = []
# while len(lst) < 6:
#     x = random.randint(1, 49)
#     if x not in lst:
#         lst.append(x)
# lst.sort()
# print(lst)

# def seq(data):
#     if data[:] == sorted(data) or data[::-1] == sorted(data):
#         return True
#     else:
#         return False
#
#
# print(seq([1, 2, 3, 90, 9]))


# def is_sublist(larger, smaller):
#     larger1 = []
#     for i in range(len(larger)):
#         if larger[i] in smaller:
#             larger1.append(larger[i])
#     if larger1 == smaller:
#         return True
#     return False
#
#
# print(is_sublist([2, 3, 4, 5], [8, 0]))


# num = int(input('input num = '))
# res = 0
# a = 0
# while num != 0:
#     a = num % 10
#     res = res*10 + a
#     num = num // 10
# print(res)


# tup = eval(input('enter tuple '))
# res = 0
# for i in range(len(tup)):
#     res += tup[i] * (pow(10, len(tup) - i -1))
# print(res)


# def sum_of_min_max(data):
#     _max = max(data)
#     _min = min(data)
#     print(_max + _min)
#
#
# print(sum_of_min_max([2, 3, 5, 79, 0, 4, -1]))


# data = eval(input('input list '))
# idx_even = []
# for i in range(len(data)):
#     if data[i] % 2 == 0:
#         idx_even.append(data[i])
# print(idx_even)


# word = input('input word ')
# print(word[::-1])


# def is_prime(m):
#     c = 0
#     for i in range(1, m + 1):
#         if m % i == 0:
#             c += 1
#     if c == 2:
#         return True
#     return False


# def smallest_prime(n):
#     while is_prime(n + 1) is False:
#         if is_prime(n + 1) is True:
#             return n+1
#         else:
#             n += 1
#     print(n + 1)
#
#
# print(smallest_prime(111))

# def get_media(data):
#     n = len(data)
#     s = 0
#     if n % 2 == 1:
#         s = data[n//2]
#     if n % 2 == 0:
#         s = float((data[(n-1)//2] + data[n//2])/2)
#     print(s)
#
#
# print(get_media([3, 4, 5, 4, 2, 0]))

# def func(year, mount):
#     if mount in [1, 3, 5, 7, 8, 10, 12]:
#         return 31
#     if mount in [4, 6, 9, 11]:
#         return 30
#     if mount in [2] and year % 4 == 0:
#         return 29
#     if mount in [2] and year % 4 != 0:
#         return 28
#
#
# print(func(2056, 2))
